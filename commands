function encodeXMLEntities(url) {
    // Define a map of special characters to their XML entities
    const xmlEntities = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&apos;'
    };

    // Use a regular expression to find special characters in the URL
    const specialChars = /[&<>"']/g;
    return url.replace(specialChars, match => xmlEntities[match]);
}

function extractRSSLinks() {
    // Select all <a> tags with class "ext"
    const rssLinks = document.querySelectorAll('a.ext');

    // Extract href attributes
    const rssUrls = Array.from(rssLinks, link => encodeXMLEntities(link.href)); // Encode URLs with XML entities

    return rssUrls;
}

function generateOPMLFile(rssUrls, pageTitle) {
    // Create OPML XML content
    const opmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>RSS Feeds - ${encodeXMLEntities(pageTitle)}</title> <!-- Encode page title with XML entities -->
  </head>
  <body>
    ${rssUrls.map(url => `<outline text="${encodeXMLEntities(url)}" type="rss" xmlUrl="${encodeXMLEntities(url)}" />`).join('\n')} <!-- Encode RSS feed URLs with XML entities -->
  </body>
</opml>`;

    // Create a Blob from the XML content
    const blob = new Blob([opmlContent], { type: 'application/xml' });

    // Generate filename including the webpage title
    const filename = `${encodeXMLEntities(pageTitle).trim().replace(/\s+/g, '_').toLowerCase()}_feeds.opml`; // Encode filename with XML entities

    // Create a download link
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = filename;

    // Append the link to the document and trigger the click event
    document.body.appendChild(link);
    link.click();

    // Remove the link from the document
    document.body.removeChild(link);
}

// Extract page title
const pageTitle = document.title;

// Execute the functions
const rssUrls = extractRSSLinks();
generateOPMLFile(rssUrls, pageTitle);
